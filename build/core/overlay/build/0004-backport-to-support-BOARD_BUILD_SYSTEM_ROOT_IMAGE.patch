From 5201f5ac8a947d4250e3b607254977719ac06994 Mon Sep 17 00:00:00 2001
From: Yonghua Zheng <yh.zheng@yuneec.com>
Date: Fri, 14 Sep 2018 09:48:32 +0800
Subject: [PATCH 4/6] backport to support BOARD_BUILD_SYSTEM_ROOT_IMAGE

BOARD_BUILD_SYSTEM_ROOT_IMAGE is used to generate a system.img
that can be used and mounted as a rootfs.
---
 core/Makefile                     | 10 ++++++++--
 tools/releasetools/build_image.py | 26 +++++++++++++++++++++++++-
 2 files changed, 33 insertions(+), 3 deletions(-)

diff --git a/core/Makefile b/core/Makefile
index 27f22a9..57a2570 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -396,8 +396,11 @@ ifneq ($(strip $(TARGET_NO_KERNEL)),true)
 # the boot image, which is a collection of other images.
 INTERNAL_BOOTIMAGE_ARGS := \
 	$(addprefix --second ,$(INSTALLED_2NDBOOTLOADER_TARGET)) \
-	--kernel $(INSTALLED_KERNEL_TARGET) \
-	--ramdisk $(INSTALLED_RAMDISK_TARGET)
+	--kernel $(INSTALLED_KERNEL_TARGET)
+
+ifneq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
+INTERNAL_BOOTIMAGE_ARGS += --ramdisk $(INSTALLED_RAMDISK_TARGET)
+endif
 
 INTERNAL_BOOTIMAGE_FILES := $(filter-out --%,$(INTERNAL_BOOTIMAGE_ARGS))
 
@@ -617,6 +620,9 @@ $(if $(BOARD_VENDORIMAGE_PARTITION_SIZE),$(hide) echo "vendor_size=$(BOARD_VENDO
 $(if $(INTERNAL_USERIMAGES_SPARSE_EXT_FLAG),$(hide) echo "extfs_sparse_flag=$(INTERNAL_USERIMAGES_SPARSE_EXT_FLAG)" >> $(1))
 $(if $(mkyaffs2_extra_flags),$(hide) echo "mkyaffs2_extra_flags=$(mkyaffs2_extra_flags)" >> $(1))
 $(hide) echo "selinux_fc=$(SELINUX_FC)" >> $(1)
+$(if $(filter true,$(BOARD_BUILD_SYSTEM_ROOT_IMAGE)),\
+    $(hide) echo "system_root_image=true" >> $(1);\
+	    echo "ramdisk_dir=$(TARGET_ROOT_OUT)" >> $(1))
 $(if $(2),$(hide) $(foreach kv,$(2),echo "$(kv)" >> $(1);))
 endef
 
diff --git a/tools/releasetools/build_image.py b/tools/releasetools/build_image.py
index f8f2ada..6791b7b 100755
--- a/tools/releasetools/build_image.py
+++ b/tools/releasetools/build_image.py
@@ -24,6 +24,8 @@ import os
 import os.path
 import subprocess
 import sys
+import shutil
+import tempfile
 
 def RunCommand(cmd):
   """ Echo and run the given command
@@ -49,6 +51,11 @@ def BuildImage(in_dir, prop_dict, out_file):
   Returns:
     True iff the image is built successfully.
   """
+  origin_in = in_dir
+  if (prop_dict.get("system_root_image") == "true"):
+    in_dir = tempfile.mkdtemp()
+    # Change the mount point to "/"
+    prop_dict["mount_point"] = "/"
   build_command = []
   fs_type = prop_dict.get("fs_type", "")
   run_fsck = False
@@ -73,7 +80,22 @@ def BuildImage(in_dir, prop_dict, out_file):
       build_command.append(prop_dict["selinux_fc"])
       build_command.append(prop_dict["mount_point"])
 
-  exit_code = RunCommand(build_command)
+  if in_dir != origin_in:
+    # Construct a staging directory of the root file system.
+    ramdisk_dir = prop_dict.get("ramdisk_dir")
+    if ramdisk_dir:
+      shutil.rmtree(in_dir)
+      shutil.copytree(ramdisk_dir, in_dir, symlinks=True)
+    staging_system = os.path.join(in_dir, "system")
+    shutil.rmtree(staging_system, ignore_errors=True)
+    shutil.copytree(origin_in, staging_system, symlinks=True)
+
+  try:
+    exit_code = RunCommand(build_command)
+  finally:
+    if in_dir != origin_in:
+      # Clean up temporary directories and files.
+      shutil.rmtree(in_dir, ignore_errors=True)
   if exit_code != 0:
     return False
 
@@ -122,6 +144,8 @@ def ImagePropFromGlobalDict(glob_dict, mount_point):
   if mount_point == "system":
     copy_prop("fs_type", "fs_type")
     copy_prop("system_size", "partition_size")
+    copy_prop("system_root_image", "system_root_image")
+    copy_prop("ramdisk_dir", "ramdisk_dir")
   elif mount_point == "data":
     copy_prop("fs_type", "fs_type")
     copy_prop("userdata_size", "partition_size")
-- 
2.7.4

